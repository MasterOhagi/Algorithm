// https://www.hackerrank.com/challenges/counting-valleys/problem

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'countingValleys' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER steps
 *  2. STRING path
 */

function countingValleys(steps, path) {
    let result = 0; // of valleys
    let secondresult = 0; // current level
    
    let arr = Array.from(path);

    arr.forEach(e => {
        if(e === 'U') {
            ++secondresult;
            console.log("++secondresult : " + secondresult);
        } else if (e === 'D') {
            --secondresult;
            console.log("--secondresult : " + secondresult);
        }
        if(secondresult === 0 && e === 'U') {
            ++result;
            console.log("HERE !!");
        }
    });
    return result;
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const steps = parseInt(readLine().trim(), 10);

    const path = readLine();

    const result = countingValleys(steps, path);

    ws.write(result + '\n');

    ws.end();
}


/*

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'countingValleys' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER steps
 *  2. STRING path
 */

function countingValleys(steps, path) {
    let result = 0; // of valleys
    let secondresult = 0; // current level
    let arr = Array.from(path);
    
    try {
    arr.forEach(e => {
        if(e === 'U') {
            ++result;
            secondresult++;
        } else if (e === 'D') {
            --result;
            secondresult++;
        }
        if(result === 0) {
            secondresult = secondresult / 2;
            throw BreakException;
        }
    });
    } catch (e) {
        return secondresult;
    }
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const steps = parseInt(readLine().trim(), 10);

    const path = readLine();

    const result = countingValleys(steps, path);

    ws.write(result + '\n');

    ws.end();
}


*/
